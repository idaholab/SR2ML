import pandas as pd 
import numpy as np
import itertools

''' These methods are designed to process the file tag_keywords_lists.xlsx
    This file contains several keywords grouped into classes (e.g., material, components, etc) 
    For each class, a tag is defined: during the NLP analysis, when these keywords are identified,
    this tag will be associated to such word.
    These methods are designed to run in sequence just once at the beginning of the NLP 
    pipeline), e.g.:
			tags_dict = keyWordListGenerator('tag_keywords_lists.xlsx')
			unit_dict = extractUnits('tag_keywords_lists.xlsx')
			tags_dict_cleaned, acronyms_dict = cleanTagDict(tags_dict)
'''

def keyWordListGenerator(file_name):
	''' Method designed to read the file and generate a dictionary which contains, for each tag,
	    the set of keywords that should be associate to such tag.
	'''
	# read excel file .xlsx
	df = pd.read_excel(file_name, None)
	# retrieve list of sheets in excel file
	sheet_list = df.keys()

	tags_dict = {}
	for sheet in sheet_list:  
		# retrieve columns of each sheet
	  cols = df[sheet].keys()
	  for col in cols:
	  	# retrieve TAG of each column; it should be contained in square brackets [tag]
	  	first = col.find("[")
	  	second = col.find("]")
	  	tag_ID = col[first+1:second]
	  	keywords_list = df[sheet][col].dropna().values.tolist()
	  	keywords_list = [[i] for i in keywords_list if i]
	  	for index,keyword in enumerate(keywords_list):
	  		if ',' in keyword[0]:
	  			keywords_list[index] = keyword[0].split(',')  	
	  	tags_dict[tag_ID] = list(itertools.chain(*keywords_list))
	return tags_dict

def extractUnits(file_name):
	''' Method designed to extract measure units from provided file.
	    It returns a dictionary which contain, for each quantity, a list of common used units, e.g.,
	    {'Pressure': ['pa', ' torr', ' barr', ' atm', ' psi']}
	'''
	measures_dict = {}
	df = pd.read_excel(file_name, None)
	measures = df['operands'][['Properties [prop]','units [unit]']]
	for index,elem in measures.iterrows(): 
		if not pd.isnull(elem['units [unit]']):
			measures_dict[elem['Properties [prop]']] = elem['units [unit]'].split(',')
	return measures_dict

def cleanTagDict(tags_dict):
	''' Method designed to clean the dictionary generated by the method keyWordListGenerator(.)
	    Here, specific characters or sub strings are removed.
	    In addition, if an acronym is defined (within round parentheses), then the acronyms_dict is 
	    populated {acronym: acronym_definition}
	'''
	acronyms_dict = {}
	n_keywords = 0
	for tag in tags_dict:
		for index,elem in enumerate(tags_dict[tag]):
			# clean string
			clean_elem = elem.lower()
			clean_elem = clean_elem.strip().lstrip()
			clean_elem = clean_elem.replace("\xa0", " ")
			clean_elem = clean_elem.replace("\n", " ")
			# Note that here we are removing the hyphen
			clean_elem = clean_elem.replace("-", " ")	

			# retrieve acronym if defined
			first = clean_elem.find("(")
			second = clean_elem.find(")")
			if (first==-1 and second>=0) or (second==-1 and first>=0):
				print('Error of acronym definition')
			if (first>=0 and second>=0):
			  acronym = clean_elem[first + 1:second].strip().lstrip()
			  to_replace = "(" + acronym + ")"
			  clean_elem = clean_elem.replace(to_replace,'')
			  clean_elem = " ".join(clean_elem.split())
			  # save acronym into its own dictionary
			  acronyms_dict[acronym] = clean_elem.strip().lstrip()
			  # remove acronym from tags_dict
			  to_replace = "(" + acronym + ")"
			  clean_elem = clean_elem.replace(to_replace,'')
			else:
				clean_elem = clean_elem

			tags_dict[tag][index] = " ".join(clean_elem.split()) # clean_elem
		tags_dict[tag] = [i for i in tags_dict[tag] if i]

	for tag in tags_dict:
		n_keywords = n_keywords + len(tags_dict[tag])	
	print("Number of listed keywords: " + str(n_keywords))
	return tags_dict,acronyms_dict

  	